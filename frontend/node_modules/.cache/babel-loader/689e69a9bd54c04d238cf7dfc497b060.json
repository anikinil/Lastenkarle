{"ast":null,"code":"var _jsxFileName = \"/home/ilja/Lastenkarle/buchungssytem-lastenkarle/frontend/src/features/enrollment/pages/Enrollment.js\";\n// Page shown to Admins and/or managers to enroll users as admins or managers\nimport React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport { USER_FLAGS } from '../../../constants/URIs/AdminURIs';\nimport { ALL_STORES } from '../../../constants/URIs/BookingURIs';\nimport { getCookie } from '../../../services/Cookies';\nimport { ERR_POSTING_ENROLLMENT } from '../../../constants/ErrorMessages';\nimport { Roles } from '../../../constants/Roles';\nconst Enrollment = () => {\n  const {\n    t\n  } = useTranslation(); // Translation hook\n  const navigate = useNavigate(); // Navigation hook\n\n  // State variables\n  const [email, setEmail] = useState();\n  const [stores, setStores] = useState([]);\n  // when role not selected, the value is ''\n  const [selectedRole, setSelectedRole] = useState('');\n  const token = getCookie('token'); // Get authentication token from cookies\n\n  // Fetch stores from the server\n  const fetchStores = () => {\n    fetch(ALL_STORES, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Token ${token}`\n      }\n    }).then(response => response.json()).then(data => setStores(data)).catch(error => console.error('Error fetching stores:', error));\n  };\n\n  // Fetch stores on component mount\n  useEffect(() => {\n    fetchStores();\n  });\n\n  // Generate role options for the select dropdown\n  const roleOptions = [\n  // TODO make proper store manager role parsing for API\n  {\n    value: '',\n    label: t('not_selected')\n  }, {\n    value: Roles.ADMINISTRATOR,\n    label: t('admin')\n  }, ...stores.map(store => ({\n    value: `Store: ${store.name}`,\n    label: t('manager_of') + store.name\n  }))];\n\n  // Post enrollment data to the server\n  const postEnrollment = () => {\n    const payload = {\n      contact_data: email,\n      flag: selectedRole\n    };\n    fetch(USER_FLAGS, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Token ${token}`\n      },\n      body: JSON.stringify(payload)\n    }).then(response => {\n      if (response.ok) {\n        alert(t('enrollment_successful'));\n      } else {\n        return response.json().then(errorText => {\n          throw new Error(errorText.detail);\n        });\n      }\n    }).catch(error => {\n      alert(ERR_POSTING_ENROLLMENT + ' ' + error.message);\n    });\n  };\n\n  // Handle role change in the select dropdown\n  const handleRoleChange = event => {\n    setSelectedRole(event.target.value);\n  };\n\n  // Prevent user from switching to a new line by hitting [Enter]\n  const handleFieldKeyDown = event => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n    }\n  };\n\n  // Handle enroll button click\n  const handleEnrollClick = () => {\n    if (selectedRole !== '') {\n      postEnrollment();\n    } else {\n      alert(t('role_not_selected'));\n    }\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, t('enrollment')), /*#__PURE__*/React.createElement(\"textarea\", {\n    title: t('enter_email'),\n    className: \"email\",\n    rows: \"1\",\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    onKeyDown: handleFieldKeyDown,\n    placeholder: t('enter_email'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, t('select_role')), /*#__PURE__*/React.createElement(\"select\", {\n    title: \"roles\",\n    className: \"select\",\n    onChange: handleRoleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, roleOptions.map(e => /*#__PURE__*/React.createElement(\"option\", {\n    key: e.value,\n    value: e.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 39\n    }\n  }, e.label))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"button accent\",\n    onClick: handleEnrollClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, t('enroll')), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"button regular\",\n    onClick: handleEnrollClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }\n  }, t('enroll'))));\n};\nexport default Enrollment;","map":{"version":3,"names":["React","useState","useEffect","useTranslation","useNavigate","USER_FLAGS","ALL_STORES","getCookie","ERR_POSTING_ENROLLMENT","Roles","Enrollment","t","navigate","email","setEmail","stores","setStores","selectedRole","setSelectedRole","token","fetchStores","fetch","headers","then","response","json","data","catch","error","console","roleOptions","value","label","ADMINISTRATOR","map","store","name","postEnrollment","payload","contact_data","flag","method","body","JSON","stringify","ok","alert","errorText","Error","detail","message","handleRoleChange","event","target","handleFieldKeyDown","key","preventDefault","handleEnrollClick","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","title","className","rows","onChange","e","onKeyDown","placeholder","type","onClick"],"sources":["/home/ilja/Lastenkarle/buchungssytem-lastenkarle/frontend/src/features/enrollment/pages/Enrollment.js"],"sourcesContent":["// Page shown to Admins and/or managers to enroll users as admins or managers\nimport React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\n\nimport { USER_FLAGS } from '../../../constants/URIs/AdminURIs';\nimport { ALL_STORES } from '../../../constants/URIs/BookingURIs';\nimport { getCookie } from '../../../services/Cookies';\nimport { ERR_POSTING_ENROLLMENT } from '../../../constants/ErrorMessages';\nimport { Roles } from '../../../constants/Roles';\n\nconst Enrollment = () => {\n    const { t } = useTranslation(); // Translation hook\n    const navigate = useNavigate(); // Navigation hook\n\n    // State variables\n    const [email, setEmail] = useState();\n    const [stores, setStores] = useState([]);\n    // when role not selected, the value is ''\n    const [selectedRole, setSelectedRole] = useState('');\n\n    const token = getCookie('token'); // Get authentication token from cookies\n\n    // Fetch stores from the server\n    const fetchStores = () => {\n        fetch(ALL_STORES, {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Token ${token}`\n            },\n        })\n            .then(response => response.json())\n            .then(data => setStores(data))\n            .catch(error => console.error('Error fetching stores:', error));\n    };\n\n    // Fetch stores on component mount\n    useEffect(() => {\n        fetchStores();\n    });\n\n    // Generate role options for the select dropdown\n    const roleOptions = [\n        // TODO make proper store manager role parsing for API\n        { value: '', label: t('not_selected') },\n        { value: Roles.ADMINISTRATOR, label: t('admin') },\n        ...stores.map((store) => (\n            { value: `Store: ${store.name}`, label: t('manager_of') + store.name }\n        )),\n    ];\n\n    // Post enrollment data to the server\n    const postEnrollment = () => {\n        const payload = {\n            contact_data: email,\n            flag: selectedRole\n        };\n\n        fetch(USER_FLAGS, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Token ${token}`\n            },\n            body: JSON.stringify(payload)\n        })\n            .then(response => {\n                if (response.ok) {\n                    alert(t('enrollment_successful'));\n                } else {\n                    return response.json().then((errorText) => {\n                        throw new Error(errorText.detail);\n                    });\n                }\n            })\n            .catch(error => {\n                alert(ERR_POSTING_ENROLLMENT + ' ' + error.message);\n            });\n    };\n\n    // Handle role change in the select dropdown\n    const handleRoleChange = (event) => {\n        setSelectedRole(event.target.value);\n    };\n\n    // Prevent user from switching to a new line by hitting [Enter]\n    const handleFieldKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n        }\n    };\n\n    // Handle enroll button click\n    const handleEnrollClick = () => {\n        if (selectedRole !== '') {\n            postEnrollment();\n        } else {\n            alert(t('role_not_selected'));\n        }\n    };\n\n    return (\n        <>\n            <h1>{t('enrollment')}</h1>\n\n            {/* <p>{t('enter_one_of_the_following_to_identify_user')}</p> */}\n{/* \n            <textarea\n                title={t('enter_username')}\n                className='username'\n                rows='1'\n                value={username}\n                onChange={e => setUsername(e.target.value)}\n                onKeyDown={handleFieldKeyDown}\n                placeholder={t('enter_username')}\n            /> */}\n\n            <textarea\n                title={t('enter_email')}\n                className='email'\n                rows='1'\n                value={email}\n                onChange={e => setEmail(e.target.value)}\n                onKeyDown={handleFieldKeyDown}\n                placeholder={t('enter_email')}\n            />\n\n            <p>{t('select_role')}</p>\n            <select title='roles' className='select' onChange={handleRoleChange}>\n                {roleOptions.map(e => <option key={e.value} value={e.value}>{e.label}</option>)}\n            </select>\n\n            <div className='button-container'>\n                <button type='button' className='button accent' onClick={handleEnrollClick}>{t('enroll')}</button>\n                <button type='button' className='button regular' onClick={handleEnrollClick}>{t('enroll')}</button>\n            </div>\n        </>\n    );\n};\n\nexport default Enrollment;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}