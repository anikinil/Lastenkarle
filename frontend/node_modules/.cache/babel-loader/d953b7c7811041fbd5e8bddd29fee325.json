{"ast":null,"code":"// import { useState, useEffect } from 'react';\n// import { fetchUserData } from '../services/authenticationService';\n\n// function getAuthenticationData() {\n//   const [user, setUser] = useState(null); // State to hold user information\n\n//   useEffect(() => {\n//     // Function to retrieve user information from local storage or authentication service\n//     const fetchUser = async () => {\n//       try {\n//         // Simulate fetching user data from a backend server or local storage\n//         const userData = await fetchUserData(); // Implement this function as needed\n//         setUser(userData);\n//       } catch (error) {\n//         console.error('Error fetching user data:', error);\n//       } finally {\n//         setLoading(false); // Set loading state to false after fetching user data\n//       }\n//     };\n\n//     fetchUser(); // Fetch user data when the component mounts\n\n//     // Cleanup function\n//     return () => {\n//       // Perform any necessary cleanup here\n//     };\n//   }, []); // Run effect only once when the component mounts\n// }\n\n// export default getAuthenticationData;","map":{"version":3,"names":[],"sources":["/home/ilja/Lastenkarle/buchungssytem-lastenkarle/frontend/src/utils/authenticatoin.js"],"sourcesContent":["// import { useState, useEffect } from 'react';\n// import { fetchUserData } from '../services/authenticationService';\n\n// function getAuthenticationData() {\n//   const [user, setUser] = useState(null); // State to hold user information\n\n//   useEffect(() => {\n//     // Function to retrieve user information from local storage or authentication service\n//     const fetchUser = async () => {\n//       try {\n//         // Simulate fetching user data from a backend server or local storage\n//         const userData = await fetchUserData(); // Implement this function as needed\n//         setUser(userData);\n//       } catch (error) {\n//         console.error('Error fetching user data:', error);\n//       } finally {\n//         setLoading(false); // Set loading state to false after fetching user data\n//       }\n//     };\n\n//     fetchUser(); // Fetch user data when the component mounts\n\n//     // Cleanup function\n//     return () => {\n//       // Perform any necessary cleanup here\n//     };\n//   }, []); // Run effect only once when the component mounts\n// }\n\n// export default getAuthenticationData;\n"],"mappings":"AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module"}