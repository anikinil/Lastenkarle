{"ast":null,"code":"var _jsxFileName = \"/home/ilja/Lastenkarle/buchungssytem-lastenkarle/frontend/src/utils/ProtectedRoute.js\";\n// import React from 'react';\n// import { Route, Redirect } from 'react-router-dom';\n\n// export const ProtectedRoute = ({ component: Component, roles, userRoles, ...rest }) => {\n//     const hasPermission = roles.every(role => userRoles.includes(role));\n\n//     return (\n//         <Route\n//             {...rest}\n//             render={(props) =>\n//                 hasPermission ? <Component {...props} /> : <Redirect to=\"/error\" />\n//             }\n//         />\n//     );\n// };\n\nimport React from 'react';\nimport { Route, Navigate } from 'react-router-dom';\nexport const ProtectedRoute = ({\n  element,\n  roles,\n  userRoles,\n  ...rest\n}) => {\n  const hasPermission = roles.every(role => userRoles.includes(role));\n\n  // If the user is authenticated, render the provided element, otherwise redirect to the login page\n  return hasPermission ? /*#__PURE__*/React.createElement(Outlet, Object.assign({}, rest, {\n    element: element,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 28\n    }\n  })) : /*#__PURE__*/React.createElement(Navigate, {\n    to: \"/login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 69\n    }\n  });\n};","map":{"version":3,"names":["React","Route","Navigate","ProtectedRoute","element","roles","userRoles","rest","hasPermission","every","role","includes","createElement","Outlet","Object","assign","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","to"],"sources":["/home/ilja/Lastenkarle/buchungssytem-lastenkarle/frontend/src/utils/ProtectedRoute.js"],"sourcesContent":["// import React from 'react';\n// import { Route, Redirect } from 'react-router-dom';\n\n// export const ProtectedRoute = ({ component: Component, roles, userRoles, ...rest }) => {\n//     const hasPermission = roles.every(role => userRoles.includes(role));\n\n//     return (\n//         <Route\n//             {...rest}\n//             render={(props) =>\n//                 hasPermission ? <Component {...props} /> : <Redirect to=\"/error\" />\n//             }\n//         />\n//     );\n// };\n\nimport React from 'react';\nimport { Route, Navigate } from 'react-router-dom';\n\nexport const ProtectedRoute = ({ element, roles, userRoles, ...rest }) => {\n\n    const hasPermission = roles.every(role => userRoles.includes(role));\n\n    // If the user is authenticated, render the provided element, otherwise redirect to the login page\n    return hasPermission ? <Outlet {...rest} element={element} /> : <Navigate to=\"/login\" />;\n}\n\n\n"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AAElD,OAAO,MAAMC,cAAc,GAAGA,CAAC;EAAEC,OAAO;EAAEC,KAAK;EAAEC,SAAS;EAAE,GAAGC;AAAK,CAAC,KAAK;EAEtE,MAAMC,aAAa,GAAGH,KAAK,CAACI,KAAK,CAACC,IAAI,IAAIJ,SAAS,CAACK,QAAQ,CAACD,IAAI,CAAC,CAAC;;EAEnE;EACA,OAAOF,aAAa,gBAAGR,KAAA,CAAAY,aAAA,CAACC,MAAM,EAAAC,MAAA,CAAAC,MAAA,KAAKR,IAAI;IAAEH,OAAO,EAAEA,OAAQ;IAAAY,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EAAE,CAAC,gBAAGrB,KAAA,CAAAY,aAAA,CAACV,QAAQ;IAACoB,EAAE,EAAC,QAAQ;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC;AAC5F,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}