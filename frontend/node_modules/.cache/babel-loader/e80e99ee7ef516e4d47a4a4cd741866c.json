{"ast":null,"code":"var _jsxFileName = \"/home/ilja/Lastenkarle/buchungssytem-lastenkarle/frontend/src/pages/Register.js\";\nimport React, { useContext, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { LOGIN as LOGIN_URI, REGISTER, USER_DATA } from '../constants/URIs/UserURIs';\nimport { useNavigate } from 'react-router-dom';\nimport { HELMHOLTZ, HOME, LOGIN as LOGIN_URL } from '../constants/URLs/Navigation';\nimport { ERR_FETCHING_USER_DATA, ERR_POSTING_LOGIN_REQUEST, ERR_POSTING_REGISTER_REQUEST } from '../constants/ErrorMessages';\nimport { AuthContext } from '../AuthProvider';\nimport { getCookie, setCookie } from '../services/Cookies';\nimport { Roles } from '../constants/Roles';\nconst Register = () => {\n  const {\n    t\n  } = useTranslation(); // Translation hook\n  const navigate = useNavigate(); // Navigation hook\n\n  const {\n    setUserRoles,\n    setUserStores\n  } = useContext(AuthContext);\n\n  // State variables for form fields\n  const [username, setUsername] = useState('');\n  const [contactData, setContactData] = useState('');\n  const [yearOfBirth, setYearOfBirth] = useState('');\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [password, setPassword] = useState('');\n\n  // Handle register button click\n  const handleRegisterClick = () => {\n    postRegister();\n  };\n\n  // Function to post registration data\n  const postRegister = () => {\n    let payload = {\n      contact_data: contactData,\n      username: username,\n      password: password\n    };\n    if (yearOfBirth !== '') {\n      payload.year_of_birth = yearOfBirth;\n    }\n    // Send the POST request to the server endpoint\n    fetch(REGISTER, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    })\n    // TODO add navigation and account for different locations where user needs to be navigated to\n    .then(async response => {\n      if (response === null || response === void 0 ? void 0 : response.ok) {\n        postLogin();\n      } else {\n        // If the request was not successful, throw an error\n        const errorData = await response.json();\n        throw new Error(errorData.message);\n      }\n    }).catch(error => {\n      alert(ERR_POSTING_REGISTER_REQUEST + ' ' + error.message);\n    });\n  };\n\n  // TODO think about how to avoid duplicate code (Login.js)\n  // Function to post login data after successful registration\n  const postLogin = () => {\n    let payload = {\n      username: username,\n      password: password\n    };\n    // Send the POST request to the login endpoint\n    fetch(LOGIN_URI, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    }).then(response => {\n      if (response === null || response === void 0 ? void 0 : response.ok) {\n        return response.json();\n      } else {\n        // If the request was not successful, throw an error\n        return response.json().then(errorData => {\n          throw new Error(errorData.message);\n        });\n      }\n    }).then(data => {\n      setCookie('token', data.token);\n      fetchUserRoles();\n      // TODO account for different locations from which user can log in and navigate back to them\n      navigate(HOME);\n    }).catch(error => {\n      alert(ERR_POSTING_LOGIN_REQUEST + ' ' + error.message);\n    });\n  };\n  const fetchUserRoles = () => {\n    const token = getCookie('token');\n    if (token !== 'undefined' && token !== null) {\n      fetch(USER_DATA, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Token ${token}`\n        }\n      }).then(response => response.json()).then(data => {\n        // get the user flags from the response\n        const flags = data.user_flags.map(element => element.flag);\n        // get the store names from the flags\n        const stores = flags.filter(role => role.includes('Store: ')).map(role => role.replace('Store: ', ''));\n        // get the roles from the flags\n        const roles = flags.filter(role => !role.includes('Store: '));\n        // if the user is manager of at least one store, add the manager role\n        if (stores.length > 0) {\n          roles.push(Roles.MANAGER);\n        }\n        // set the cookies\n        setCookie('userRoles', roles);\n        setCookie('userStores', stores);\n        setUserRoles(roles);\n        setUserStores(stores);\n      }).catch(error => {\n        console.error(ERR_FETCHING_USER_DATA, error);\n      });\n    } else {\n      setCookie('userRoles', [Roles.VISITOR]);\n    }\n  };\n\n  // Handle Helmholtz registration button click\n  const handleHelmholtzRegistrationClick = () => {\n    window.location.replace(HELMHOLTZ);\n  };\n\n  // Prevent user from switching to new line by hitting [Enter]\n  const handleFieldKeyDown = event => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n    }\n  };\n\n  // Handle login button click\n  const handleLoginClick = () => {\n    navigate(LOGIN_URL);\n  };\n\n  // TODO use SingleLineInput component everywhere\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }, t('register')), /*#__PURE__*/React.createElement(\"textarea\", {\n    title: t('enter_username'),\n    className: \"username\",\n    rows: \"1\",\n    value: username,\n    onChange: e => setUsername(e.target.value),\n    onKeyDown: handleFieldKeyDown,\n    placeholder: t('enter_username'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    title: t('enter_contact_data'),\n    className: \"contact-data\",\n    rows: \"1\",\n    value: contactData,\n    onChange: e => setContactData(e.target.value),\n    onKeyDown: handleFieldKeyDown,\n    placeholder: t('enter_contact_data'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    title: t('enter_year_of_birth'),\n    className: \"year-of-birth\",\n    rows: \"1\",\n    value: yearOfBirth,\n    onChange: e => setYearOfBirth(e.target.value),\n    onKeyDown: handleFieldKeyDown,\n    placeholder: t('enter_year_of_birth'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    title: t('enter_first_name'),\n    className: \"first_name\",\n    rows: \"1\",\n    value: firstName,\n    onChange: e => setFirstName(e.target.value),\n    onKeyDown: handleFieldKeyDown,\n    placeholder: t('enter_first_name'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    title: t('enter_last_name'),\n    className: \"last_name\",\n    rows: \"1\",\n    value: lastName,\n    onChange: e => setLastName(e.target.value),\n    onKeyDown: handleFieldKeyDown,\n    placeholder: t('enter_last_name'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    title: t('enter_password'),\n    className: \"password\",\n    rows: \"1\",\n    value: password,\n    onChange: e => setPassword(e.target.value),\n    onKeyDown: handleFieldKeyDown,\n    placeholder: t('enter_password'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"button accent\",\n    onClick: handleRegisterClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 17\n    }\n  }, t('register')), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"button regular\",\n    onClick: handleHelmholtzRegistrationClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 17\n    }\n  }, t('helmholtz_registration')), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"button regular\",\n    onClick: handleLoginClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 17\n    }\n  }, t('login_instead'))));\n};\nexport default Register;","map":{"version":3,"names":["React","useContext","useState","useTranslation","LOGIN","LOGIN_URI","REGISTER","USER_DATA","useNavigate","HELMHOLTZ","HOME","LOGIN_URL","ERR_FETCHING_USER_DATA","ERR_POSTING_LOGIN_REQUEST","ERR_POSTING_REGISTER_REQUEST","AuthContext","getCookie","setCookie","Roles","Register","t","navigate","setUserRoles","setUserStores","username","setUsername","contactData","setContactData","yearOfBirth","setYearOfBirth","firstName","setFirstName","lastName","setLastName","password","setPassword","handleRegisterClick","postRegister","payload","contact_data","year_of_birth","fetch","method","headers","body","JSON","stringify","then","response","ok","postLogin","errorData","json","Error","message","catch","error","alert","data","token","fetchUserRoles","flags","user_flags","map","element","flag","stores","filter","role","includes","replace","roles","length","push","MANAGER","console","VISITOR","handleHelmholtzRegistrationClick","window","location","handleFieldKeyDown","event","key","preventDefault","handleLoginClick","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","title","className","rows","value","onChange","e","target","onKeyDown","placeholder","type","onClick"],"sources":["/home/ilja/Lastenkarle/buchungssytem-lastenkarle/frontend/src/pages/Register.js"],"sourcesContent":["import React, { useContext, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { LOGIN as LOGIN_URI, REGISTER, USER_DATA } from '../constants/URIs/UserURIs';\nimport { useNavigate } from 'react-router-dom';\nimport { HELMHOLTZ, HOME, LOGIN as LOGIN_URL } from '../constants/URLs/Navigation';\nimport { ERR_FETCHING_USER_DATA, ERR_POSTING_LOGIN_REQUEST, ERR_POSTING_REGISTER_REQUEST } from '../constants/ErrorMessages';\nimport { AuthContext } from '../AuthProvider';\nimport { getCookie, setCookie } from '../services/Cookies';\nimport { Roles } from '../constants/Roles';\n\nconst Register = () => {\n    const { t } = useTranslation(); // Translation hook\n    const navigate = useNavigate(); // Navigation hook\n\n    const { setUserRoles, setUserStores } = useContext(AuthContext);\n\n    // State variables for form fields\n    const [username, setUsername] = useState('');\n    const [contactData, setContactData] = useState('');\n    const [yearOfBirth, setYearOfBirth] = useState('');\n    const [firstName, setFirstName] = useState('');\n    const [lastName, setLastName] = useState('');\n    const [password, setPassword] = useState('');\n\n    // Handle register button click\n    const handleRegisterClick = () => {\n        postRegister();\n    };\n\n    // Function to post registration data\n    const postRegister = () => {\n        let payload = {\n            contact_data: contactData,\n            username: username,\n            password: password\n        };\n        if (yearOfBirth !== '') {\n            payload.year_of_birth = yearOfBirth;\n        }\n        // Send the POST request to the server endpoint\n        fetch(REGISTER, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(payload)\n        })\n            // TODO add navigation and account for different locations where user needs to be navigated to\n            .then(async response => {\n                if (response?.ok) {\n                    postLogin();\n                } else {\n                    // If the request was not successful, throw an error\n                    const errorData = await response.json();\n                    throw new Error(errorData.message);\n                }\n            })\n            .catch(error => {\n                alert(ERR_POSTING_REGISTER_REQUEST + ' ' + error.message);\n            });\n    };\n\n    // TODO think about how to avoid duplicate code (Login.js)\n    // Function to post login data after successful registration\n    const postLogin = () => {\n        let payload = {\n            username: username,\n            password: password\n        };\n        // Send the POST request to the login endpoint\n        fetch(LOGIN_URI, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(payload)\n        })\n            .then(response => {\n                if (response?.ok) {\n                    return response.json();\n                } else {\n                    // If the request was not successful, throw an error\n                    return response.json().then(errorData => {\n                        throw new Error(errorData.message);\n                    });\n                }\n            })\n            .then(data => {\n                setCookie('token', data.token);\n                fetchUserRoles();\n                // TODO account for different locations from which user can log in and navigate back to them\n                navigate(HOME);\n            })\n            .catch(error => {\n                alert(ERR_POSTING_LOGIN_REQUEST + ' ' + error.message);\n            });\n    };\n\n\n    const fetchUserRoles = () => {\n        const token = getCookie('token');\n        if (token !== 'undefined' && token !== null) {\n            fetch(USER_DATA, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Token ${token}`,\n                }\n            })\n                .then(response => response.json())\n                .then(data => {\n                    // get the user flags from the response\n                    const flags = data.user_flags.map(element => element.flag);\n                    // get the store names from the flags\n                    const stores = flags.filter(role => role.includes('Store: ')).map(role => role.replace('Store: ', ''));\n                    // get the roles from the flags\n                    const roles = (flags.filter(role => !role.includes('Store: ')));\n                    // if the user is manager of at least one store, add the manager role\n                    if (stores.length > 0) { roles.push(Roles.MANAGER); }\n                    // set the cookies\n                    setCookie('userRoles', roles);\n                    setCookie('userStores', stores);\n                    setUserRoles(roles);\n                    setUserStores(stores);\n                })\n                .catch(error => {\n                    console.error(ERR_FETCHING_USER_DATA, error);\n                });\n        } else {\n            setCookie('userRoles', [Roles.VISITOR]);\n        }\n    }\n\n    // Handle Helmholtz registration button click\n    const handleHelmholtzRegistrationClick = () => {\n        window.location.replace(HELMHOLTZ);\n    }\n\n    // Prevent user from switching to new line by hitting [Enter]\n    const handleFieldKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n        }\n    };\n\n    // Handle login button click\n    const handleLoginClick = () => {\n        navigate(LOGIN_URL);\n    };\n\n    // TODO use SingleLineInput component everywhere\n    return (\n        <>\n            <h1>{t('register')}</h1>\n\n            <textarea\n                title={t('enter_username')}\n                className='username'\n                rows='1'\n                value={username}\n                onChange={e => setUsername(e.target.value)}\n                onKeyDown={handleFieldKeyDown}\n                placeholder={t('enter_username')}\n            >\n            </textarea>\n\n            <textarea\n                title={t('enter_contact_data')}\n                className='contact-data'\n                rows='1'\n                value={contactData}\n                onChange={e => setContactData(e.target.value)}\n                onKeyDown={handleFieldKeyDown}\n                placeholder={t('enter_contact_data')}\n            >\n            </textarea>\n\n            <textarea\n                title={t('enter_year_of_birth')}\n                className='year-of-birth'\n                rows='1'\n                value={yearOfBirth}\n                onChange={e => setYearOfBirth(e.target.value)}\n                onKeyDown={handleFieldKeyDown}\n                placeholder={t('enter_year_of_birth')}\n            >\n            </textarea>\n\n            <textarea\n                title={t('enter_first_name')}\n                className='first_name'\n                rows='1'\n                value={firstName}\n                onChange={e => setFirstName(e.target.value)}\n                onKeyDown={handleFieldKeyDown}\n                placeholder={t('enter_first_name')}\n            >\n            </textarea>\n\n            <textarea\n                title={t('enter_last_name')}\n                className='last_name'\n                rows='1'\n                value={lastName}\n                onChange={e => setLastName(e.target.value)}\n                onKeyDown={handleFieldKeyDown}\n                placeholder={t('enter_last_name')}\n            >\n            </textarea>\n\n            <textarea\n                title={t('enter_password')}\n                className='password'\n                rows='1'\n                value={password}\n                onChange={e => setPassword(e.target.value)}\n                onKeyDown={handleFieldKeyDown}\n                placeholder={t('enter_password')}\n            >\n            </textarea>\n\n            <div className='button-container'>\n                <button type='button' className='button accent' onClick={handleRegisterClick}>{t('register')}</button>\n                <button type='button' className='button regular' onClick={handleHelmholtzRegistrationClick}>{t('helmholtz_registration')}</button>\n                <button type='button' className='button regular' onClick={handleLoginClick}>{t('login_instead')}</button>\n            </div>\n        </>\n    );\n};\n\nexport default Register;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}