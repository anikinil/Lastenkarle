{"ast":null,"code":"var _jsxFileName = \"/home/ilja/Lastenkarle/buchungssytem-lastenkarle/frontend/src/features/storeConfig/pages/StoreConfigPage.js\";\nimport React from \"react\";\n\n// Importing components for display and configuration\nimport PictureAndDescriptionField from \"../../../components/display/pictureAndDescriptionField/PictureAndDescriptionField\";\nimport StoreOpeningTimesConfig from \"../components/StoreOpeningTimesConfig\";\nimport BikeList from \"../../bikeList/components/BikeList\";\n\n// Importing hooks for routing and translation\nimport { useParams } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from 'react-router-dom';\n\n// Importing a text field component\nimport SingleLineTextField from \"../../../components/display/SingleLineTextField\";\nimport { ID } from \"../../../constants/URIs/General\";\nimport { STORE_NAME, STORE_PAGE_BY_STORE_NAME } from \"../../../constants/URIs/ManagerURI\";\n\n// Mock data for stores (to be replaced with actual fetching logic)\nlet stores = [{\n  id: 1,\n  name: 'Store 1',\n  image: require('../../../assets/images/store1.jpg'),\n  description: 'This is a description of Store 1',\n  address: 'Musterstraße 123, 76137 Karlsruhe'\n}, {\n  id: 2,\n  name: 'Store 2',\n  image: require('../../../assets/images/store1.jpg').default,\n  description: 'This is a description of Store 2',\n  address: 'Musterstraße 123, 76137 Karlsruhe'\n}, {\n  id: 3,\n  name: 'Store 3',\n  image: null,\n  description: 'This is a description of Store 3',\n  address: 'Musterstraße 123, 76137 Karlsruhe'\n}];\n\n// page for the configuration of an existing store\nconst StoreConfigPage = () => {\n  const {\n    t\n  } = useTranslation();\n\n  // Extracting store ID from URL parameters\n  const {\n    storeName\n  } = useParams();\n  // Finding the store object based on the ID\n  const store = stores.find(s => s.id === parseInt(id));\n  const fetchStore = () => {\n    fetch(STORE_PAGE_BY_STORE_NAME.replace(STORE_NAME, storeName)).then(response => response.json()).then(data => {\n      setStore(data);\n    }).catch(error => {\n      console.error(ERR_FETCHING_STORE, error);\n    });\n  };\n  useEffect(() => {\n    fetchStore();\n  }, []);\n  const handleAddressChange = value => {\n    setNewAddress(value);\n  };\n\n  // Hook for navigation\n  const navigate = useNavigate();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PictureAndDescriptionField, {\n    image: store.image,\n    description: store.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(SingleLineTextField, {\n    editable: true,\n    value: store.address,\n    title: 'address',\n    onChange: handleAddressChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(StoreOpeningTimesConfig, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(BikeList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(SingleLineTextField, {\n    value: store.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }));\n};\nexport default StoreConfigPage;","map":{"version":3,"names":["React","PictureAndDescriptionField","StoreOpeningTimesConfig","BikeList","useParams","useTranslation","useNavigate","SingleLineTextField","ID","STORE_NAME","STORE_PAGE_BY_STORE_NAME","stores","id","name","image","require","description","address","default","StoreConfigPage","t","storeName","store","find","s","parseInt","fetchStore","fetch","replace","then","response","json","data","setStore","catch","error","console","ERR_FETCHING_STORE","useEffect","handleAddressChange","value","setNewAddress","navigate","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","editable","title","onChange"],"sources":["/home/ilja/Lastenkarle/buchungssytem-lastenkarle/frontend/src/features/storeConfig/pages/StoreConfigPage.js"],"sourcesContent":["import React from \"react\";\n\n// Importing components for display and configuration\nimport PictureAndDescriptionField from \"../../../components/display/pictureAndDescriptionField/PictureAndDescriptionField\";\nimport StoreOpeningTimesConfig from \"../components/StoreOpeningTimesConfig\";\nimport BikeList from \"../../bikeList/components/BikeList\";\n\n// Importing hooks for routing and translation\nimport { useParams } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from 'react-router-dom';\n\n// Importing a text field component\nimport SingleLineTextField from \"../../../components/display/SingleLineTextField\";\nimport { ID } from \"../../../constants/URIs/General\";\nimport { STORE_NAME, STORE_PAGE_BY_STORE_NAME } from \"../../../constants/URIs/ManagerURI\";\n\n// Mock data for stores (to be replaced with actual fetching logic)\nlet stores = [\n    {\n\n        id: 1,\n        name: 'Store 1',\n        image: require('../../../assets/images/store1.jpg'),\n        description: 'This is a description of Store 1',\n        address: 'Musterstraße 123, 76137 Karlsruhe'\n    },\n    {\n        id: 2,\n        name: 'Store 2',\n        image: require('../../../assets/images/store1.jpg').default,\n        description: 'This is a description of Store 2',\n        address: 'Musterstraße 123, 76137 Karlsruhe'\n    },\n    {\n        id: 3,\n        name: 'Store 3',\n        image: null,\n        description: 'This is a description of Store 3',\n        address: 'Musterstraße 123, 76137 Karlsruhe'\n    }\n]\n\n// page for the configuration of an existing store\nconst StoreConfigPage = () => {\n\n    const { t } = useTranslation();\n\n    // Extracting store ID from URL parameters\n    const { storeName } = useParams();\n    // Finding the store object based on the ID\n    const store = stores.find(s => s.id === parseInt(id));\n\n    const fetchStore = () => {\n        fetch(STORE_PAGE_BY_STORE_NAME.replace(STORE_NAME, storeName))\n            .then(response => response.json())\n            .then(data => {\n                setStore(data);\n            })\n            .catch(error => {\n                console.error(ERR_FETCHING_STORE, error);\n            });\n    }\n\n    useEffect(() => {\n        fetchStore();\n    }, [])\n\n    const handleAddressChange = (value) => {\n        setNewAddress(value)\n    }\n\n    // Hook for navigation\n    const navigate = useNavigate();\n\n    return (\n        <div>\n            {/* Displaying store picture and description */}\n            <PictureAndDescriptionField \n                image={store.image} \n                description={store.description} \n            />\n            <SingleLineTextField editable={true} value={store.address} title={'address'} onChange={handleAddressChange}/>\n            {/* Configuring store opening times */}\n            <StoreOpeningTimesConfig />\n            {/* Displaying list of bikes of the store */}\n            <BikeList />\n            {/* Single line text field for store name */}\n            <SingleLineTextField value={store.name} />\n        </div>\n    );\n};\n\nexport default StoreConfigPage;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAOC,0BAA0B,MAAM,mFAAmF;AAC1H,OAAOC,uBAAuB,MAAM,uCAAuC;AAC3E,OAAOC,QAAQ,MAAM,oCAAoC;;AAEzD;AACA,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,cAAc,QAAQ,eAAe;AAC9C,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,OAAOC,mBAAmB,MAAM,iDAAiD;AACjF,SAASC,EAAE,QAAQ,iCAAiC;AACpD,SAASC,UAAU,EAAEC,wBAAwB,QAAQ,oCAAoC;;AAEzF;AACA,IAAIC,MAAM,GAAG,CACT;EAEIC,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,SAAS;EACfC,KAAK,EAAEC,OAAO,CAAC,mCAAmC,CAAC;EACnDC,WAAW,EAAE,kCAAkC;EAC/CC,OAAO,EAAE;AACb,CAAC,EACD;EACIL,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,SAAS;EACfC,KAAK,EAAEC,OAAO,CAAC,mCAAmC,CAAC,CAACG,OAAO;EAC3DF,WAAW,EAAE,kCAAkC;EAC/CC,OAAO,EAAE;AACb,CAAC,EACD;EACIL,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,SAAS;EACfC,KAAK,EAAE,IAAI;EACXE,WAAW,EAAE,kCAAkC;EAC/CC,OAAO,EAAE;AACb,CAAC,CACJ;;AAED;AACA,MAAME,eAAe,GAAGA,CAAA,KAAM;EAE1B,MAAM;IAAEC;EAAE,CAAC,GAAGf,cAAc,CAAC,CAAC;;EAE9B;EACA,MAAM;IAAEgB;EAAU,CAAC,GAAGjB,SAAS,CAAC,CAAC;EACjC;EACA,MAAMkB,KAAK,GAAGX,MAAM,CAACY,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACZ,EAAE,KAAKa,QAAQ,CAACb,EAAE,CAAC,CAAC;EAErD,MAAMc,UAAU,GAAGA,CAAA,KAAM;IACrBC,KAAK,CAACjB,wBAAwB,CAACkB,OAAO,CAACnB,UAAU,EAAEY,SAAS,CAAC,CAAC,CACzDQ,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACVC,QAAQ,CAACD,IAAI,CAAC;IAClB,CAAC,CAAC,CACDE,KAAK,CAACC,KAAK,IAAI;MACZC,OAAO,CAACD,KAAK,CAACE,kBAAkB,EAAEF,KAAK,CAAC;IAC5C,CAAC,CAAC;EACV,CAAC;EAEDG,SAAS,CAAC,MAAM;IACZZ,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMa,mBAAmB,GAAIC,KAAK,IAAK;IACnCC,aAAa,CAACD,KAAK,CAAC;EACxB,CAAC;;EAED;EACA,MAAME,QAAQ,GAAGpC,WAAW,CAAC,CAAC;EAE9B,oBACIN,KAAA,CAAA2C,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAEIjD,KAAA,CAAA2C,aAAA,CAAC1C,0BAA0B;IACvBa,KAAK,EAAEQ,KAAK,CAACR,KAAM;IACnBE,WAAW,EAAEM,KAAK,CAACN,WAAY;IAAA4B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAClC,CAAC,eACFjD,KAAA,CAAA2C,aAAA,CAACpC,mBAAmB;IAAC2C,QAAQ,EAAE,IAAK;IAACV,KAAK,EAAElB,KAAK,CAACL,OAAQ;IAACkC,KAAK,EAAE,SAAU;IAACC,QAAQ,EAAEb,mBAAoB;IAAAK,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAC,CAAC,eAE7GjD,KAAA,CAAA2C,aAAA,CAACzC,uBAAuB;IAAA0C,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eAE3BjD,KAAA,CAAA2C,aAAA,CAACxC,QAAQ;IAAAyC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eAEZjD,KAAA,CAAA2C,aAAA,CAACpC,mBAAmB;IAACiC,KAAK,EAAElB,KAAK,CAACT,IAAK;IAAA+B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACxC,CAAC;AAEd,CAAC;AAED,eAAe9B,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module"}