{"ast":null,"code":"var _jsxFileName = \"/home/ilja/Lastenkarle/buchungssytem-lastenkarle/frontend/src/features/storeList/components/StoreList.js\";\n// Import necessary libraries and components\nimport React, { useEffect, useState } from 'react';\nimport { FaSortAlphaDown, FaSortAlphaUp } from 'react-icons/fa';\nimport StoreListItem from './StoreListItem';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport { ALL_STORES } from '../../../constants/URIs/BookingURIs';\nimport { getCookie } from '../../../services/Cookies';\nimport { STORE_REGISTRATION } from '../../../constants/URLs/Navigation';\nconst StoreList = () => {\n  // Initialize translation and navigation hooks\n  const {\n    t\n  } = useTranslation();\n  const navigate = useNavigate();\n\n  // Retrieve token from cookies\n  const token = getCookie('token');\n\n  // State to store the list of stores\n  const [stores, setStores] = useState([]);\n\n  // State to manage sorting order\n  const [sortAZ, setSortAZ] = useState(true);\n\n  // Function to fetch stores from the API\n  const fetchStores = async () => {\n    const response = await fetch(ALL_STORES, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Token ${token}`\n      }\n    });\n    const data = await response.json();\n    setStores(data);\n  };\n\n  // Fetch stores when the component mounts\n  useEffect(() => {\n    fetchStores();\n  }, []);\n\n  // Handle sort button click\n  const handleSortClick = () => {\n    setSortAZ(!sortAZ);\n    resort();\n  };\n\n  // Resort the stores based on the current sorting order\n  const resort = () => {\n    stores.sort((a, b) => sortAZ ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name));\n  };\n\n  // Handle new store button click\n  const handleNewStoreClick = () => {\n    navigate(STORE_REGISTRATION);\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"list-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"sort-button\",\n    onClick: handleSortClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, sortAZ ? /*#__PURE__*/React.createElement(FaSortAlphaUp, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 31\n    }\n  }) : /*#__PURE__*/React.createElement(FaSortAlphaDown, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 51\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"new-store-button\",\n    onClick: handleNewStoreClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, t('add_new_store'))), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, stores.map(store => /*#__PURE__*/React.createElement(StoreListItem, {\n    store: store,\n    key: store.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }))));\n};\nexport default StoreList;","map":{"version":3,"names":["React","useEffect","useState","FaSortAlphaDown","FaSortAlphaUp","StoreListItem","useTranslation","useNavigate","ALL_STORES","getCookie","STORE_REGISTRATION","StoreList","t","navigate","token","stores","setStores","sortAZ","setSortAZ","fetchStores","response","fetch","headers","data","json","handleSortClick","resort","sort","a","b","name","localeCompare","handleNewStoreClick","createElement","Fragment","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","map","store","key","id"],"sources":["/home/ilja/Lastenkarle/buchungssytem-lastenkarle/frontend/src/features/storeList/components/StoreList.js"],"sourcesContent":["// Import necessary libraries and components\nimport React, { useEffect, useState } from 'react';\nimport { FaSortAlphaDown, FaSortAlphaUp } from 'react-icons/fa';\nimport StoreListItem from './StoreListItem';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport { ALL_STORES } from '../../../constants/URIs/BookingURIs';\nimport { getCookie } from '../../../services/Cookies';\nimport { STORE_REGISTRATION } from '../../../constants/URLs/Navigation';\n\nconst StoreList = () => {\n    // Initialize translation and navigation hooks\n    const { t } = useTranslation();\n    const navigate = useNavigate();\n\n    // Retrieve token from cookies\n    const token = getCookie('token');\n\n    // State to store the list of stores\n    const [stores, setStores] = useState([]);\n\n    // State to manage sorting order\n    const [sortAZ, setSortAZ] = useState(true);\n\n    // Function to fetch stores from the API\n    const fetchStores = async () => {\n        const response = await fetch(ALL_STORES, {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Token ${token}`,\n            }\n        });\n        const data = await response.json();\n        setStores(data);\n    };\n\n    // Fetch stores when the component mounts\n    useEffect(() => {\n        fetchStores();\n    }, [])\n\n    // Handle sort button click\n    const handleSortClick = () => {\n        setSortAZ(!sortAZ);\n        resort();\n    }\n\n    // Resort the stores based on the current sorting order\n    const resort = () => {\n        stores.sort((a, b) => sortAZ ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name));\n    }\n\n    // Handle new store button click\n    const handleNewStoreClick = () => {\n        navigate(STORE_REGISTRATION);\n    }\n\n    return (\n        <>\n            {/* Buttons for sorting and adding new store */}\n            <div className='list-button-container'>\n                <button type='button' className='sort-button' onClick={handleSortClick}>\n                    {sortAZ ? <FaSortAlphaUp /> : <FaSortAlphaDown />}\n                </button>\n                <button type='button' className='new-store-button' onClick={handleNewStoreClick}>{t('add_new_store')}</button>\n            </div>\n\n            {/* List of stores */}\n            <ul className='list'>\n                {stores.map((store) => (\n                    <StoreListItem store={store} key={store.id} />\n                ))}\n            </ul>\n        </>\n    );\n};\n\nexport default StoreList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}