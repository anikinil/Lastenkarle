from django.template.loader import render_to_stringfrom django.core.mail import EmailMessagefrom Buchungssystem_Lastenkarle.settings import EMAIL_HOST_USER, CANONICAL_HOST, BASE_DIRimport pyqrcodeimport osimport magicfrom django.http import HttpResponsefrom xhtml2pdf import pisaimport urllib.parsefrom db_model.models import User, User_Flagfrom configs.global_variables import spenden_linkfrom configs.global_variables import lastenkarle_contact_datadef generate_qrcode(string, booking_string):    qr = pyqrcode.create(string)    project_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))    folder_path = os.path.join(project_dir, 'media', 'qr-codes')    if not os.path.exists(folder_path):        os.makedirs(folder_path)    qr_filename = f"{booking_string}.png"    qr_path = os.path.join(folder_path, qr_filename)    qr.png(qr_path, scale=10)    return qr_pathdef create_and_save_booking_pdf_from_html(html_content, booking_string):    project_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))    output_pdf_dir = os.path.join(project_dir, 'media', 'pdf')    if not os.path.exists(output_pdf_dir):        os.makedirs(output_pdf_dir)    output_pdf_path = os.path.join(output_pdf_dir, f'{booking_string}.pdf')    pdf_file = open(output_pdf_path, "wb")    pisa_status = pisa.CreatePDF(html_content, dest=pdf_file)    pdf_file.close()    if pisa_status.err:        return HttpResponse("Error creating PDF file")    return output_pdf_pathdef split_string_by_delimiter(input_string, delimiter):    if not input_string:        return []  # Return an empty list if the input string is empty    elif not delimiter:        return input_string    split_array = input_string.split(delimiter)  # Split the input string using the delimiter    split_array = [item.strip() for item in split_array]  # Remove leading and trailing whitespaces from each item    return split_arraydef format_equipment(equipment):    equipment_strings = [str(item) for item in equipment]    return ', '.join(equipment_strings)def format_opening_hours(store):    if store.mon_opened == False:        mon = '---'    else:        mon = str(store.mon_open.strftime('%H:%M')) + ' - ' + str(store.mon_close.strftime('%H:%M'))    if store.tue_opened == False:        tue = '---'    else:        tue = str(store.tue_open.strftime('%H:%M')) + ' - ' + str(store.tue_close.strftime('%H:%M'))    if store.wed_opened == False:        wed = '---'    else:        wed = str(store.wed_open.strftime('%H:%M')) + ' - ' + str(store.wed_close.strftime('%H:%M'))    if store.thu_opened == False:        thu = '---'    else:        thu = str(store.thu_open.strftime('%H:%M')) + ' - ' + str(store.thu_close.strftime('%H:%M'))    if store.fri_opened == False:        fri = '---'    else:        fri = str(store.fri_open.strftime('%H:%M')) + ' - ' + str(store.fri_close.strftime('%H:%M'))    if store.sat_opened == False:        sat = '---'    else:        sat = str(store.sat_open.strftime('%H:%M')) + ' - ' + str(store.sat_close.strftime('%H:%M'))    if store.sun_opened == False:        sun = '---'    else:        sun = str(store.sun_open.strftime('%H:%M')) + ' - ' + str(store.sun_close.strftime('%H:%M'))    opening_hours = ['Montag : ' + mon, 'Dienstag: ' + tue, 'Mittwoch: ' + wed, 'Donnerstag: ' + thu, 'Freitag: ' + fri, 'Samstag: ' + sat, 'Sonntag: ' + sun]    return(opening_hours)def format_date(date):    return str(date.day) + '.' + str(date.month) + '.' + str(date.year)def create_booking_pdf(booking):    generate_qrcode(urllib.parse.urljoin(urllib.parse.urljoin(CANONICAL_HOST, "booking/"), booking.string), booking.string)    context = {        'bike_name': booking.bike.name,        'store_name': booking.bike.store.name,        'start_date': booking.begin,        'end_date': booking.end,        'username': booking.user.username,        'booking_string': booking.string,        'qr_path': os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "media", "qr-codes", "%s.png" % booking.string))    }    attachment_html = render_to_string("email_templates/BookingresponseQR.html", context)    attachment_path = create_and_save_booking_pdf_from_html(attachment_html, booking.string)    with open(attachment_path, 'rb') as file:        file_content = file.read()    file_name = os.path.basename(attachment_path)    return file_name, file_contentdef send_booking_confirmation(booking):    file_name, file_content = create_booking_pdf(booking)    subject = f"Deine Buchung von {booking.bike.name} bei {booking.bike.store.name} von {booking.begin} bis {booking.end}"    context = {        'username': booking.user.username,        'bike_name': booking.bike.name,        'store_name': booking.bike.store.name,        'start_date': format_date(booking.begin),        'end_date': format_date(booking.end),        'booking_equipment': format_equipment(booking.equipment.all()),        'store_address': booking.bike.store.address,        'store_phone_number': booking.bike.store.phone_number,        'store_email': booking.bike.store.email,        'spenden_link': spenden_link,        'lastenkarle_contact_data': lastenkarle_contact_data    }    html_message = render_to_string("email_templates/BookingMailTemplate.html", context)    from_email = EMAIL_HOST_USER    recipient_list = [booking.user.contact_data]    email = EmailMessage(subject, html_message, from_email, recipient_list)    email.content_subtype = 'html'    email.attach(file_name, file_content, magic.from_buffer(file_content, mime=True))    email.send()def send_user_warning_to_admins(booking):    subject = f"Benutzer {booking.user.username} wurde ermahnt"    context = {        'username': booking.user.username,        'store_name': booking.bike.store.name,        'store_address': booking.bike.store.address,        'store_phone_number': booking.bike.store.phone_number,        'store_email': booking.bike.store.email,        'comment': booking.comment,    }    html_message = render_to_string("email_templates/AdminUserWarningNotification.html", context)    from_email = EMAIL_HOST_USER    recipient_list = [user.contact_data for user in User.objects.filter(user_flags=User_Flag.objects.get(flag="Administrator"))]    email = EmailMessage(subject, html_message, from_email, recipient_list)    email.content_subtype = 'html'    email.send()def send_bike_drop_off_confirmation(booking):    subject = f"Statuswechsel deiner Buchung: Lastenrad {booking.bike.name} wurde zurückgegeben"    context = {        'username': booking.user.username,        'bike_name': booking.bike.name,        'store_name': booking.bike.store.name,        'store_address': booking.bike.store.address,        'store_phone_number': booking.bike.store.phone_number,        'store_email': booking.bike.store.email    }    html_message = render_to_string("email_templates/BikeDropOffConfirmation.html", context)    from_email = EMAIL_HOST_USER    recipient_list = [booking.user.contact_data]    email = EmailMessage(subject, html_message, from_email, recipient_list)    email.content_subtype = 'html'    email.send()def send_bike_pick_up_confirmation(booking):    subject = f"Statuswechsel deiner Buchung: Lastenrad {booking.bike.name} wurde abgeholt"    context = {        'username': booking.user.username,        'bike_name': booking.bike.name,        'store_name': booking.bike.store.name,        'store_address': booking.bike.store.address,        'store_phone_number': booking.bike.store.phone_number,        'store_email': booking.bike.store.email    }    html_message = render_to_string("email_templates/BikePickUpConfirmation.html", context)    from_email = EMAIL_HOST_USER    recipient_list = [booking.user.contact_data]    email = EmailMessage(subject, html_message, from_email, recipient_list)    email.content_subtype = 'html'    email.send()def send_cancellation_confirmation(booking):    subject = f"Stornierung deiner Buchung von {booking.begin} bis {booking.end}"    context = {        'username': booking.user.username,        'bike_name': booking.bike.name,        'store_name': booking.bike.store.name,        'start_date': booking.begin,        'end_date': booking.end,    }    html_message = render_to_string("email_templates/CancellationConfirmation.html", context)    from_email = EMAIL_HOST_USER    recipient_list = [booking.user.contact_data]    email = EmailMessage(subject, html_message, from_email, recipient_list)    email.content_subtype = 'html'    email.send()def send_cancellation_through_store_confirmation(booking):    subject = f"Stornierung deiner Buchung von {booking.begin} bis {booking.end}"    context = {        'username': booking.user.username,        'bike_name': booking.bike.name,        'store_name': booking.bike.store.name,        'start_date': booking.begin,        'end_date': booking.end,    }    html_message = render_to_string("email_templates/CancellationThroughStoreConfirmation.html", context)    from_email = EMAIL_HOST_USER    recipient_list = [booking.user.contact_data]    email = EmailMessage(subject, html_message, from_email, recipient_list)    email.content_subtype = 'html'    email.send()def send_banned_mail_to_user(user):    subject = "Statuswechsel deines Accounts: Du wurdest gebannt"    context = {        'username': user.username,        'lastenkarle_contact_data': lastenkarle_contact_data    }    html_message = render_to_string("email_templates/UserBannedMail.html", context)    from_email = EMAIL_HOST_USER    recipient_list = [user.contact_data]    email = EmailMessage(subject, html_message, from_email, recipient_list)    email.content_subtype = 'html'    email.send()def send_user_registered_confirmation(user):    subject = "Dein Account bei Lastenkarle: Bitte bestätige deine E-Mail"    context = {        'username': user.username,        'registration_link': CANONICAL_HOST + "/email-verification/" + str(user.pk) + "/" + user.verification_string    }    html_message = render_to_string("email_templates/UserRegisteredConfirmation.html", context)    from_email = EMAIL_HOST_USER    recipient_list = [user.contact_data]    email = EmailMessage(subject, html_message, from_email, recipient_list)    email.content_subtype = 'html'    email.send()def send_user_verified_confirmation(user):    subject = "Statuswechsel deines Accounts: Du bist verifiziert"    context = {        'username': user.username,        'lastenkarle_contact_data': lastenkarle_contact_data    }    html_message = render_to_string("email_templates/UserVerifiedConfirmation.html", context)    from_email = EMAIL_HOST_USER    recipient_list = [user.contact_data]    email = EmailMessage(subject, html_message, from_email, recipient_list)    email.content_subtype = 'html'    email.send()def send_user_changed_mail(user):    subject = "Dein Account bei Lastenkarle: Bitte bestätige deine E-Mail"    context = {        'username': user.username,        'verification_link': CANONICAL_HOST + "/email-verification/" + str(user.pk) + "/" + user.verification_string,    }    html_message = render_to_string("email_templates/EmailChangedTemplate.html", context)    from_email = EMAIL_HOST_USER    recipient_list = [user.contact_data]    email = EmailMessage(subject, html_message, from_email, recipient_list)    email.content_subtype = 'html'    email.send()def send_user_warning(booking):    subject = "Statuswechsel deines Accounts: Du wurdest ermahnt"    context = {        'username': booking.user.username,        'store_name': booking.bike.store.name,        'comment': booking.comment,        'store_address': booking.bike.store.address,        'store_phone_number': booking.bike.store.phone_number,        'store_email': booking.bike.store.email,    }    html_message = render_to_string("email_templates/UserWarning.html", context)    from_email = EMAIL_HOST_USER    recipient_list = [booking.user.contact_data]    email = EmailMessage(subject, html_message, from_email, recipient_list)    email.content_subtype = 'html'    email.send()