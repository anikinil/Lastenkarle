swagger: '2.0'
info:
  title: Manager Rest API
  description: The Manager API is used for store adminstration purposes. Therefore it provides all the necessary information which are related to the store the manager belongs to and allows the user to update it. For using any of these API calls an user needs to be logged in and their account must have the necessary permissions.
  version: v1
host: django
schemes:
  - http
basePath: /api/manager/v1
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  TokenAuth:
    type: apiKey
    in: header
    name: Authorization
security:
  - TokenAuth: []
paths:
  /bikes:
    get:
      operationId: bikes_list
      summary: Get Bikes of Store
      description: Retrieve bikes associated with the store.
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - TokenAuth: []
      responses:
        '200':
          description: List of bikes
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  description: Bike ID.
                  type: integer
                name:
                  description: Bike name.
                  type: string
                image:
                  description: Bike image URL.
                  type: string
                description:
                  description: Bike description.
                  type: string
                equipment:
                  description: Equipment list.
                  type: array
                  items:
                    type: string
        '401':
          description: Unauthorized - User not logged in.
        '403':
          description: Forbidden - User does not have the necessary permissions.
      consumes:
        - multipart/form-data
        - application/x-www-form-urlencoded
      tags:
        - bikes
    post:
      operationId: bikes_create
      summary: Create Bike
      description: Create a new bike associated with the store.
      parameters:
        - name: name
          in: formData
          description: Updated bike name.
          type: string
        - name: image
          in: formData
          description: Updated bike image.
          type: file
        - name: description
          in: formData
          description: Updated bike description.
          type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - TokenAuth: []
      responses:
        '201':
          description: Bike created successfully.
          schema:
            $ref: '#/definitions/Bike'
        '400':
          description: Bad Request - Invalid input data.
        '401':
          description: Unauthorized - User not logged in.
        '403':
          description: Forbidden - User does not have the necessary permissions.
      consumes:
        - multipart/form-data
        - application/x-www-form-urlencoded
      tags:
        - bikes
    parameters: []
  /bikes/{bike_id}:
    get:
      operationId: bikes_read
      summary: Get Selected Bike
      description: Retrieve details of a selected bike associated with the store.
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - TokenAuth: []
      responses:
        '200':
          description: Bike details
          schema:
            type: object
            properties:
              name:
                description: Bike name.
                type: string
              image:
                description: Bike image URL.
                type: string
              description:
                description: Bike description.
                type: string
              equipment:
                description: Equipment list.
                type: array
                items:
                  type: string
        '401':
          description: Unauthorized - User not logged in.
        '403':
          description: Forbidden - User does not have the necessary permissions.
        '404':
          description: Bike not found or does not belong to the store.
      tags:
        - bikes
    parameters:
      - name: bike_id
        in: path
        required: true
        type: string
  /bikes/{bike_id}/availability:
    get:
      operationId: bikes_availability_list
      summary: Get Bike Availability
      description: Retrieve the availability details for a selected bike in the store.
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - TokenAuth: []
      responses:
        '200':
          description: List of bike availabilities
          schema:
            type: array
            items:
              type: object
              properties:
                from_date:
                  description: Availability start date.
                  type: string
                until_date:
                  description: Availability end date.
                  type: string
                availability_status:
                  description: Availability status.
                  type: array
                  items:
                    type: string
        '401':
          description: Unauthorized - User not logged in.
        '403':
          description: Forbidden - User does not have the necessary permissions.
        '404':
          description: Bike not found or does not belong to the store.
      tags:
        - bikes
    parameters:
      - name: bike_id
        in: path
        required: true
        type: string
  /bikes/{bike_id}/delete:
    delete:
      operationId: bikes_delete_delete
      summary: Delete Bike
      description: Delete a bike associated with the store if it is not picked up at the given time.
      parameters:
        - name: bike_id
          in: path
          description: Bike ID to delete.
          required: true
          type: integer
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - TokenAuth: []
      responses:
        '200':
          description: Bike successfully deleted.
        '400':
          description: Bad Request - Bike has active bookings or invalid input data.
        '401':
          description: Unauthorized - User not logged in.
        '403':
          description: Forbidden - User does not have the necessary permissions.
        '404':
          description: Not Found - Bike or store not found.
      tags:
        - bikes
    parameters:
      - name: bike_id
        in: path
        required: true
        type: string
  /bikes/{bike_id}/equipment:
    post:
      operationId: bikes_equipment_create
      summary: Add Equipment to Selected Bike
      description: Add equipment to a selected bike in the store.
      parameters:
        - name: data
          in: body
          required: true
          schema:
            required:
              - equipment
            type: object
            properties:
              equipment:
                description: Equipment to add to the bike.
                type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - TokenAuth: []
      responses:
        '200':
          description: Equipment added to the bike successfully.
        '201':
          description: Equipment created and added to the bike successfully.
        '400':
          description: Bad Request - Invalid input or missing data.
        '401':
          description: Unauthorized - User not logged in.
        '403':
          description: Forbidden - User does not have the necessary permissions.
        '404':
          description: Bike not found or does not belong to the store.
      tags:
        - bikes
    delete:
      operationId: bikes_equipment_delete
      summary: Remove Equipment from Selected Bike
      description: Remove equipment from a selected bike in the store.
      parameters:
        - name: data
          in: body
          required: true
          schema:
            required:
              - equipment
            type: object
            properties:
              equipment:
                description: Equipment to remove from the bike.
                type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - TokenAuth: []
      responses:
        '200':
          description: Equipment removed successfully.
        '400':
          description: Bad Request - Invalid input or missing data.
        '401':
          description: Unauthorized - User not logged in.
        '403':
          description: Forbidden - User does not have the necessary permissions.
        '404':
          description: Bike or equipment not found or does not belong to the store.
      tags:
        - bikes
    parameters:
      - name: bike_id
        in: path
        required: true
        type: string
  /bikes/{bike_id}/internal-booking:
    post:
      operationId: bikes_internal-booking_create
      summary: Make Internal Booking
      description: Make an internal booking for a bike in the store.
      parameters:
        - name: data
          in: body
          required: true
          schema:
            required:
              - from_date
              - until_date
            type: object
            properties:
              from_date:
                description: Booking start date.
                type: string
              until_date:
                description: Booking end date.
                type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - TokenAuth: []
      responses:
        '201':
          description: Internal booking created successfully.
        '400':
          description: Bad Request - Invalid input or bike not available.
        '401':
          description: Unauthorized - User not logged in.
        '403':
          description: Forbidden - User does not have the necessary permissions.
        '404':
          description: Bike not found or does not belong to the store.
      tags:
        - bikes
    parameters:
      - name: bike_id
        in: path
        required: true
        type: string
  /bikes/{bike_id}/update:
    patch:
      operationId: bikes_update_partial_update
      summary: Update Selected Bike
      description: Update the details of a selected bike in the store.
      parameters:
        - name: name
          in: formData
          description: Updated bike name.
          type: string
        - name: image
          in: formData
          description: Updated bike image.
          type: file
        - name: description
          in: formData
          description: Updated bike description.
          type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - TokenAuth: []
      responses:
        '200':
          description: Bike details updated successfully.
          schema:
            type: object
            properties:
              name:
                description: Updated bike name.
                type: string
              image:
                description: Updated bike image URL.
                type: string
              description:
                description: Updated bike description.
                type: string
              equipment:
                description: Equipment list.
                type: array
                items:
                  type: string
        '400':
          description: Bad Request - Invalid input or missing data.
        '401':
          description: Unauthorized - User not logged in.
        '403':
          description: Forbidden - User does not have the necessary permissions.
        '404':
          description: Bike not found or does not belong to the store.
      consumes:
        - multipart/form-data
        - application/x-www-form-urlencoded
      tags:
        - bikes
    parameters:
      - name: bike_id
        in: path
        required: true
        type: string
  /bookings:
    get:
      operationId: bookings_list
      summary: Get Bookings of the Store
      description: Retrieve all bookings for bikes in the store.
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - TokenAuth: []
      responses:
        '200':
          description: List of bookings
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  description: Booking ID.
                  type: integer
                preferred_username:
                  description: User's preferred username.
                  type: string
                bike:
                  description: Bike details.
                  type: object
                begin:
                  description: Booking start date.
                  type: string
                end:
                  description: Booking end date.
                  type: string
                comment:
                  description: Booking comment.
                  type: string
                booking_status:
                  description: Booking status.
                  type: array
                  items:
                    type: string
                equipment:
                  description: Equipment list.
                  type: array
                  items:
                    type: string
        '401':
          description: Unauthorized - User not logged in.
        '403':
          description: Forbidden - User does not have the necessary permissions.
      tags:
        - bookings
    parameters: []
  /bookings/by/{qr_string}:
    get:
      operationId: bookings_by_read
      summary: Find Booking by QR String
      description: Find a booking by its QR string.
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - TokenAuth: []
      responses:
        '200':
          description: Booking information
          schema:
            type: object
            properties:
              preferred_username:
                description: User's preferred username.
                type: string
              assurance_lvl:
                description: User's assurance level.
                type: string
              bike:
                description: Bike details.
                type: object
              begin:
                description: Booking start date.
                type: string
              end:
                description: Booking end date.
                type: string
              comment:
                description: Booking comment.
                type: string
              id:
                description: Booking ID.
                type: integer
              booking_status:
                description: Booking status.
                type: array
                items:
                  type: string
              equipment:
                description: Equipment list.
                type: array
                items:
                  type: string
        '401':
          description: Unauthorized - User not logged in.
        '403':
          description: Forbidden - User does not have the necessary permissions.
        '404':
          description: Not Found - Booking not found or not associated with the store.
      tags:
        - bookings
    parameters:
      - name: qr_string
        in: path
        required: true
        type: string
  /bookings/{booking_id}:
    get:
      operationId: bookings_read
      summary: Get Selected Booking of the Store
      description: Retrieve details of a selected booking for the store.
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - TokenAuth: []
      responses:
        '200':
          description: Booking details
          schema:
            type: object
            properties:
              preferred_username:
                description: User's preferred username.
                type: string
              bike:
                description: Bike details.
                type: object
              begin:
                description: Booking start date.
                type: string
              end:
                description: Booking end date.
                type: string
              comment:
                description: Booking comment.
                type: string
              booking_status:
                description: Booking status.
                type: array
                items:
                  type: string
              equipment:
                description: Equipment list.
                type: array
                items:
                  type: string
        '401':
          description: Unauthorized - User not logged in.
        '403':
          description: Forbidden - User does not have the necessary permissions.
        '404':
          description: Not Found - Booking not found in the store.
      tags:
        - bookings
    post:
      operationId: bookings_create
      summary: Cancel Selected Booking of the Store
      description: Cancel a selected booking for the store.
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - TokenAuth: []
      responses:
        '200':
          description: Booking successfully canceled.
        '400':
          description: Bad Request - Booking cannot be canceled.
        '401':
          description: Unauthorized - User not logged in.
        '403':
          description: Forbidden - User does not have the necessary permissions.
        '404':
          description: Not Found - Booking not found in the store.
      tags:
        - bookings
    parameters:
      - name: booking_id
        in: path
        required: true
        type: string
  /bookings/{booking_id}/comment:
    patch:
      operationId: bookings_comment_partial_update
      summary: Add or Update Comment to Booking
      description: Add or update a comment to a booking.
      parameters:
        - name: data
          in: body
          required: true
          schema:
            type: object
            properties:
              comment:
                description: Booking comment.
                type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - TokenAuth: []
      responses:
        '200':
          description: Booking comment added or updated successfully.
          schema:
            type: object
            properties:
              comment:
                description: Updated booking comment.
                type: string
        '400':
          description: Bad Request - Invalid input or missing data.
        '401':
          description: Unauthorized - User not logged in.
        '403':
          description: Forbidden - User does not have the necessary permissions.
        '404':
          description: Not Found - Booking not found in the store.
      tags:
        - bookings
    parameters:
      - name: booking_id
        in: path
        required: true
        type: string
  /bookings/{booking_id}/comment/report:
    post:
      operationId: bookings_comment_report_create
      summary: Report Comment on Booking
      description: Report a comment on a booking to the default admin contact, marking the user as 'Reminded'.
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - TokenAuth: []
      responses:
        '200':
          description: Comment reported successfully.
        '401':
          description: Unauthorized - User not logged in.
        '403':
          description: Forbidden - User does not have the necessary permissions.
        '404':
          description: Not Found - Booking not found in the store.
      tags:
        - bookings
    parameters:
      - name: booking_id
        in: path
        required: true
        type: string
  /bookings/{booking_id}/hand-out:
    post:
      operationId: bookings_hand-out_create
      summary: Confirm Bike Handout
      description: Confirm that the bike has been handed out to the user.
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - TokenAuth: []
      responses:
        '200':
          description: Bike handout confirmed successfully.
        '401':
          description: Unauthorized - User not logged in.
        '403':
          description: Forbidden - User does not have the necessary permissions.
        '404':
          description: Not Found - Booking not found, not associated with the store, or not in 'Booked' status.
      tags:
        - bookings
    parameters:
      - name: booking_id
        in: path
        required: true
        type: string
  /bookings/{booking_id}/return:
    post:
      operationId: bookings_return_create
      summary: Confirm Bike Return
      description: Confirm that the bike has been returned by the user.
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - TokenAuth: []
      responses:
        '200':
          description: Bike return confirmed successfully.
        '401':
          description: Unauthorized - User not logged in.
        '403':
          description: Forbidden - User does not have the necessary permissions.
        '404':
          description: Not Found - Booking not found, not associated with the store, or not in 'Picked up' status.
      tags:
        - bookings
    parameters:
      - name: booking_id
        in: path
        required: true
        type: string
  /bookings/{booking_id}/user-info:
    get:
      operationId: bookings_user-info_list
      summary: Get Local Data for Booking
      description: Get or update local data for the user associated with a booking.
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - TokenAuth: []
      responses:
        '200':
          description: Local data retrieved successfully.
          schema:
            type: object
            properties:
              first_name:
                description: User's first name.
                type: string
              last_name:
                description: User's last name.
                type: string
              address:
                description: User's address.
                type: string
              date_of_verification:
                description: Date of user's verification.
                type: string
                format: date
              id_number:
                description: User's ID number.
                type: string
        '400':
          description: Bad Request - Invalid input or missing data.
        '401':
          description: Unauthorized - User not logged in.
        '403':
          description: Forbidden - User does not have the necessary permissions.
        '404':
          description: Not Found - Booking or local data not found in the store.
      tags:
        - bookings
    post:
      operationId: bookings_user-info_create
      summary: Create Local Data
      description: Create local data for the user associated with a booking.
      parameters:
        - name: data
          in: body
          required: true
          schema:
            type: object
            properties:
              first_name:
                description: User's first name.
                type: string
              last_name:
                description: User's last name.
                type: string
              address:
                description: User's address.
                type: string
              id_number:
                description: User's ID number.
                type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - TokenAuth: []
      responses:
        '201':
          description: Local data created successfully.
        '400':
          description: Bad Request - Invalid input or missing data.
        '401':
          description: Unauthorized - User not logged in.
        '403':
          description: Forbidden - User does not have the necessary permissions.
        '404':
          description: Not Found - Booking not found in the store.
      tags:
        - bookings
    patch:
      operationId: bookings_user-info_partial_update
      summary: Update Local Data
      description: Update local data for the user associated with a booking.
      parameters:
        - name: data
          in: body
          required: true
          schema:
            type: object
            properties:
              first_name:
                description: User's first name.
                type: string
              last_name:
                description: User's last name.
                type: string
              address:
                description: User's address.
                type: string
              id_number:
                description: User's ID number.
                type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - TokenAuth: []
      responses:
        '200':
          description: Local data updated successfully.
          schema:
            type: object
            properties:
              first_name:
                description: Updated first name.
                type: string
              last_name:
                description: Updated last name.
                type: string
              address:
                description: Updated address.
                type: string
              id_number:
                description: Updated ID number.
                type: string
        '400':
          description: Bad Request - Invalid input or missing data.
        '401':
          description: Unauthorized - User not logged in.
        '403':
          description: Forbidden - User does not have the necessary permissions.
        '404':
          description: Not Found - Booking or local data not found in the store.
      tags:
        - bookings
    parameters:
      - name: booking_id
        in: path
        required: true
        type: string
  /enrollment:
    post:
      operationId: enrollment_create
      summary: Enroll User as Staff
      description: Enroll a user as staff for the store.
      parameters:
        - name: data
          in: body
          required: true
          schema:
            type: object
            properties:
              contact_data:
                description: User's contact email.
                type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - TokenAuth: []
      responses:
        '200':
          description: User successfully enrolled as staff.
        '400':
          description: Bad Request - User is already staff or invalid input data.
        '401':
          description: Unauthorized - User not logged in.
        '403':
          description: Forbidden - User does not have the necessary permissions.
        '404':
          description: Not Found - User not found.
      tags:
        - enrollment
    parameters: []
  /equipment:
    get:
      operationId: equipment_list
      summary: Get Registered Equipment
      description: Retrieve a list of all registered equipment.
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - TokenAuth: []
      responses:
        '200':
          description: List of registered equipment
          schema:
            type: object
            properties:
              id:
                description: Equipment ID.
                type: integer
              equipment:
                description: Equipment list.
                type: array
                items:
                  type: string
        '401':
          description: Unauthorized - User not logged in.
        '403':
          description: Forbidden - User does not have the necessary permissions.
      tags:
        - equipment
    parameters: []
  /store-page:
    get:
      operationId: store-page_list
      summary: Get Store Page
      description: Retrieve store information for the logged-in staff user.
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - TokenAuth: []
      responses:
        '200':
          description: Store information
          schema:
            $ref: '#/definitions/Store'
        '401':
          description: Unauthorized - User not logged in.
        '403':
          description: Forbidden - User does not have the necessary permissions.
      tags:
        - store-page
    patch:
      operationId: store-page_partial_update
      summary: Update Store Page
      description: Update store information of the store. Non updatable fields are region, name, id.
      parameters:
        - name: data
          in: body
          required: true
          schema:
            type: object
            properties:
              address:
                description: New address.
                type: string
              phone_number:
                description: New phone number.
                type: string
              email:
                description: New email.
                type: string
              prep_time:
                description: New preparation time.
                type: string
              mon_opened:
                description: Is open on Monday.
                type: boolean
              mon_open:
                description: Monday opening time.
                type: string
              mon_close:
                description: Monday closing time.
                type: string
              tue_opened:
                description: Is open on Tuesday.
                type: boolean
              tue_open:
                description: Tuesday opening time.
                type: string
              tue_close:
                description: Tuesday closing time.
                type: string
              wed_opened:
                description: Is open on Wednesday.
                type: boolean
              wed_open:
                description: Wednesday opening time.
                type: string
              wed_close:
                description: Wednesday closing time.
                type: string
              thu_opened:
                description: Is open on Thursday.
                type: boolean
              thu_open:
                description: Thursday opening time.
                type: string
              thu_close:
                description: Thursday closing time.
                type: string
              fri_opened:
                description: Is open on Friday.
                type: boolean
              fri_open:
                description: Friday opening time.
                type: string
              fri_close:
                description: Friday closing time.
                type: string
              sat_opened:
                description: Is open on Saturday.
                type: boolean
              sat_open:
                description: Saturday opening time.
                type: string
              sat_close:
                description: Saturday closing time.
                type: string
              sun_opened:
                description: Is open on Sunday.
                type: boolean
              sun_open:
                description: Sunday opening time.
                type: string
              sun_close:
                description: Sunday closing time.
                type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - TokenAuth: []
      responses:
        '200':
          description: Store information updated successfully
          schema:
            $ref: '#/definitions/Store'
        '400':
          description: Bad Request - Invalid input or missing data.
        '401':
          description: Unauthorized - User not logged in.
        '403':
          description: Forbidden - User does not have the necessary permissions.
      tags:
        - store-page
    parameters: []
definitions:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        assurance_lvl:
          type: string
          enum: [N, L, M, H]
        year_of_birth:
          type: integer
        contact_data:
          type: string
          format: email
        is_staff:
          type: boolean
        is_superuser:
          type: boolean
        is_active:
          type: boolean
        verification_string:
          type: string
        preferred_username:
          type: string
        password:
          type: string
      example:
        id: 1
        username: johndoe
        assurance_lvl: L
        year_of_birth: 1990
        contact_data: johndoe@example.com
        is_staff: false
        is_superuser: false
        is_active: true
        verification_string: abcdef123456
        preferred_username: johndoe
        password: [hashed_password]

    UserStatus:
      type: object
      properties:
        id:
          type: integer
        user_status:
          type: string
      example:
        id: 1
        user_status: Customer

    Store:
      type: object
      properties:
        id:
          type: integer
        region:
          type: string
          enum: [KA, ETT, BAD, BRU, MAL]
        address:
          type: string
        phone_number:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        prep_time:
          type: string
        mon_opened:
          type: boolean
        mon_open:
          type: string
          format: time
        mon_close:
          type: string
          format: time
        tue_opened:
          type: boolean
        tue_open:
          type: string
          format: time
        tue_close:
          type: string
          format: time
        wed_opened:
          type: boolean
        wed_open:
          type: string
          format: time
        wed_close:
          type: string
          format: time
        thu_opened:
          type: boolean
        thu_open:
          type: string
          format: time
        thu_close:
          type: string
          format: time
        fri_opened:
          type: boolean
        fri_open:
          type: string
          format: time
        fri_close:
          type: string
          format: time
        sat_opened:
          type: boolean
        sat_open:
          type: string
          format: time
        sat_close:
          type: string
          format: time
        sun_opened:
          type: boolean
        sun_open:
          type: string
          format: time
        sun_close:
          type: string
          format: time
      example:
        id: 1
        region: KA
        address: 123 Main St, Karlsruhe
        phone_number: +1234567890
        email: store@example.com
        name: My Store
        prep_time: "00:00"
        mon_opened: true
        mon_open: "08:00"
        mon_close: "18:00"
        tue_opened: true
        tue_open: "08:00"
        tue_close: "18:00"
        wed_opened: true
        wed_open: "08:00"
        wed_close: "18:00"
        thu_opened: true
        thu_open: "08:00"
        thu_close: "18:00"
        fri_opened: true
        fri_open: "08:00"
        fri_close: "18:00"
        sat_opened: false
        sat_open: "08:00"
        sat_close: "18:00"
        sun_opened: false
        sun_open: "08:00"
        sun_close: "18:00"

    LocalData:
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        address:
          type: string
        date_of_verification:
          type: string
          format: date
        id_number:
          type: string
          maxLength: 3
      example:
        id: 1
        first_name: John
        last_name: Doe
        address: 456 Elm St, Springfield
        date_of_verification: "2023-09-17"
        id_number: ABC

    Equipment:
      type: object
      properties:
        id:
          type: integer
        equipment:
          type: string
      example:
        id: 1
        equipment: Bike Helmet

    Bike:
      type: object
      properties:
        id:
          type: integer
        store:
          type: integer
        name:
          type: string
        description:
          type: string
        image:
          type: string
        equipment:
          type: array
          items:
            type: integer
      example:
        id: 1
        store: 1
        name: Mountain Bike
        description: High-performance mountain bike
        image: mountain_bike.jpg
        equipment: [1, 2]

    AvailabilityStatus:
      type: object
      properties:
        id:
          type: integer
        availability_status:
          type: string
      example:
        id: 1
        availability_status: Available

    Availability:
      type: object
      properties:
        id:
          type: integer
        from_date:
          type: string
          format: date
        until_date:
          type: string
          format: date
        store:
          type: integer
        bike:
          type: integer
        availability_status:
          type: array
          items:
            type: integer
      example:
        id: 1
        from_date: "2023-09-17"
        until_date: "2023-09-30"
        store: 1
        bike: 1
        availability_status: [1, 2]

    BookingStatus:
      type: object
      properties:
        id:
          type: integer
        booking_status:
          type: string
      example:
        id: 1
        booking_status: Confirmed

    Booking:
      type: object
      properties:
        id:
          type: integer
        user:
          type: integer
        bike:
          type: integer
        begin:
          type: string
          format: date
        end:
          type: string
          format: date
        string:
          type: string
          maxLength: 5
        comment:
          type: string
        booking_status:
          type: array
          items:
            type: integer
        equipment:
          type: array
          items:
            type: integer
      example:
        id: 1
        user: 1
        bike: 1
        begin: "2023-09-20"
        end: "2023-09-25"
        string: ABCDE
        comment: Booking comment
        booking_status: [1, 2]
        equipment: [1, 2]
