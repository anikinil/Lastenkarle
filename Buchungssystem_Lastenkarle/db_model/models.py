from django.db import modelsfrom django.contrib.auth.models import AbstractBaseUser, BaseUserManagerfrom datetime import date, time, datetime, timedeltaimport randomimport stringdef generate_random_string(length):    while (True):        characters = string.ascii_letters + string.digits        random_string = ''.join(random.choices(characters, k=length))        if not Booking.objects.filter(string=random_string).exists():            return random_stringclass UserManager(BaseUserManager):    def create_user(self, username, **extra_fields):        user = User(username=username, **extra_fields)        user.is_active = True        user.save()        user_status_customer = User_Status.objects.get(user_status='Customer')        user.user_status.add(user_status_customer)        if user.is_superuser:            user_status_admin = User_Status.objects.get(user_status='Administrator')            user.user_status.add(user_status_admin)            user_status_verified = User_Status.objects.get(user_status='Verified')            user.user_status.add(user_status_verified)        return user    def create_helmholtz_user(self, userinfo):        user = User.objects.create(username=userinfo['eduperson_unique_id'], password=" ")        user.preferred_username = userinfo['preferred_username']        user.is_active = True        user.user_status.add(User_Status.objects.get(user_status='Customer'))        if user.is_superuser:            user.user_status.add(User_Status.objects.get(user_status='Administrator'))            user.user_status.add(User_Status.objects.get(user_status='Verified'))        return self.update_helmholtz_user(user, userinfo)    def update_helmholtz_user(self, user, userinfo):        if 'https://refeds.org/assurance/IAP/high' in userinfo['eduperson_assurance']:            user.assurance_lvl = 'H'        elif 'https://refeds.org/assurance/IAP/medium' in userinfo['eduperson_assurance']:            user.assurance_lvl = 'M'        else:            user.assurance_lvl = 'L'        user.contact_data = userinfo['email']        user.save()        return user    def create_superuser(self, **extra_fields):        extra_fields['is_staff'] = True        extra_fields['is_superuser'] = True        if extra_fields.get('is_staff') is not True:            raise ValueError('Superuser must have is_staff=True.')        if extra_fields.get('is_superuser') is not True:            raise ValueError('Superuser must have is_superuser=True.')        return self.create_user(**extra_fields)class User_Status(models.Model):    user_status = models.CharField(max_length=1024)    @classmethod    def custom_create_store_flags(cls, store):        store_name = store.name        flag = f"Store: {store_name}"        instance = cls(user_status=flag)        instance.save()        return instanceclass Store(models.Model):    REGION = [("KA", "Karlsruhe"), ("ETT", "Ettlingen"), ("BAD", "Baden-Baden"),              ("BRU", "Bruchsal"), ("MAL", "Malsch"), ]    store_flag = models.OneToOneField('User_Status', on_delete=models.CASCADE, null=True)    region = models.TextField(max_length=3, choices=REGION)    address = models.TextField(null=True)    phone_number = models.TextField(max_length=256, null=True)    email = models.EmailField(max_length=256)    name = models.TextField(max_length=1000, unique=True, null=True)    prep_time = models.TimeField(default=time(00, 00))    mon_opened = models.BooleanField(default=False)    mon_open = models.TimeField(default=time(00, 00))    mon_close = models.TimeField(default=time(00, 00))    tue_opened = models.BooleanField(default=False)    tue_open = models.TimeField(default=time(00, 00))    tue_close = models.TimeField(default=time(00, 00))    wed_opened = models.BooleanField(default=False)    wed_open = models.TimeField(default=time(00, 00))    wed_close = models.TimeField(default=time(00, 00))    thu_opened = models.BooleanField(default=False)    thu_open = models.TimeField(default=time(00, 00))    thu_close = models.TimeField(default=time(00, 00))    fri_opened = models.BooleanField(default=False)    fri_open = models.TimeField(default=time(00, 00))    fri_close = models.TimeField(default=time(00, 00))    sat_opened = models.BooleanField(default=False)    sat_open = models.TimeField(default=time(00, 00))    sat_close = models.TimeField(default=time(00, 00))    sun_opened = models.BooleanField(default=False)    sun_open = models.TimeField(default=time(00, 00))    sun_close = models.TimeField(default=time(00, 00))    def _get_weekday_string(self, day_prefix, opened_field, open_field, close_field):        if getattr(self, opened_field):            open_time = getattr(self, open_field).strftime("%H:%M")            close_time = getattr(self, close_field).strftime("%H:%M")            return f"{day_prefix}: {open_time} - {close_time}"        else:            return f"{day_prefix}: closed"    def get_week_schedule_string(self):        weekdays = [            ("Mon", "mon_opened", "mon_open", "mon_close"),            ("Tue", "tue_opened", "tue_open", "tue_close"),            ("Wed", "wed_opened", "wed_open", "wed_close"),            ("Thu", "thu_opened", "thu_open", "thu_close"),            ("Fri", "fri_opened", "fri_open", "fri_close"),            ("Sat", "sat_opened", "sat_open", "sat_close"),            ("Sun", "sun_opened", "sun_open", "sun_close")        ]        schedule_strings = [            self._get_weekday_string(day_prefix, opened_field, open_field, close_field)            for day_prefix, opened_field, open_field, close_field in weekdays        ]        return "\n".join(schedule_strings)    def delete(self, *args, **kwargs):        if self.store_flag:            self.store_flag.delete()        self.bike_set.all().delete()        super(Store, self).delete(*args, **kwargs)class User(AbstractBaseUser):    ASSURANCE_LEVEL = [        ("N", "None"), ("L", "Low"), ("M", "Medium"), ("H", "High"),    ]    user_status = models.ManyToManyField(User_Status)    assurance_lvl = models.CharField(max_length=1, choices=ASSURANCE_LEVEL, default='L', null=True)    year_of_birth = models.IntegerField(null=True)    contact_data = models.EmailField(unique=True, null=True)    is_staff = models.BooleanField(default=False)    is_superuser = models.BooleanField(default=False)    is_active = models.BooleanField(default=True)    verification_string = models.TextField(max_length=256, null=True)    username = models.TextField(unique=True, null=True)    preferred_username = models.TextField(null=True)    password = models.TextField(null=True)    REQUIRED_FIELDS = ['contact_data']    USERNAME_FIELD = 'username'    objects = UserManager()    def anonymize(self):        self.assurance_lvl = None        self.year_of_birth = None        self.contact_data = None        self.is_superuser = False        self.is_staff = False        self.is_active = False        self.username = None        self.preferred_username = None        self.password = None        return self    def __str__(self):        return self.preferred_username    def save(self, *args, **kwargs):        if self.username:            self.username = self.username            self.preferred_username = self.username        if self.password:            self.password = self.password            self.set_password(self.password)        if self.contact_data:            self.contact_data = self.contact_data            self.verification_string = generate_random_string(30)        super(User, self).save(*args, **kwargs)    def has_module_perms(self, app_label):        return True    def has_perm(self, perm, obj=None):        return True    def is_staff_of_store(self):        store_flag = self.user_status.get(user_status__startswith='Store:').user_status        name_part = store_flag.split(': ')[1]        store = Store.objects.get(name=name_part)        return storeclass OIDCLoginData(models.Model):    user = models.OneToOneField('User', on_delete=models.CASCADE, null=True)    issue = models.TextField(null=True)    subject = models.TextField(null=True)class LocalData(models.Model):    user = models.OneToOneField('User', on_delete=models.CASCADE, null=True)    first_name = models.TextField(null=True)    last_name = models.TextField(null=True)    address = models.TextField(null=True)    date_of_verification = models.DateField(default=datetime.now() + timedelta(days=180))    id_number = models.TextField(max_length=3, null=True)    def anonymize(self):        self.first_name = None        self.last_name = None        self.address = None        self.date_of_verification = None        self.id_number = None        return selfclass Equipment(models.Model):    equipment = models.TextField(max_length=1024, unique=True)class Bike(models.Model):    store = models.ForeignKey(Store, on_delete=models.CASCADE)    name = models.TextField(null=True)    description = models.TextField(null=True)    image = models.ImageField(upload_to='bikes', null=True)    equipment = models.ManyToManyField(Equipment)    @classmethod    def create_bike(cls, store, **data):        bike_data = {'store': store, **{field: value[0] for field, value in data.items() if field and value is not None}}        return Bike.objects.create(**bike_data)    def delete(self, *args, **kwargs):        self.availability_set.all().delete()        super(Bike, self).delete(*args, **kwargs)class Availability_Status(models.Model):    availability_status = models.CharField(max_length=32)class Availability(models.Model):    from_date = models.DateField(default=date(1000, 1, 1))    until_date = models.DateField(default=date(5000, 1, 1))    store = models.ForeignKey(Store, on_delete=models.CASCADE)    bike = models.ForeignKey(Bike, on_delete=models.CASCADE)    availability_status = models.ManyToManyField(Availability_Status)    @classmethod    def create_availability(cls, store, bike):        instance = cls(store=store, bike=bike)        instance.save()        instance.availability_status.set(Availability_Status.objects.filter(availability_status='Available'))        instance.save()        return instanceclass Booking_Status(models.Model):    booking_status = models.CharField(max_length=256)class Booking(models.Model):    user = models.ForeignKey(User, on_delete=models.CASCADE)    bike = models.ForeignKey(Bike, on_delete=models.CASCADE)    begin = models.DateField(null=True)    end = models.DateField(null=True)    string = models.CharField(max_length=5, null=True, unique=True)    comment = models.TextField(max_length=1024, default="")    booking_status = models.ManyToManyField(Booking_Status)    equipment = models.ManyToManyField(Equipment)