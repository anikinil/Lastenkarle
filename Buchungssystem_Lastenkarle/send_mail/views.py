from django.shortcuts import renderfrom django.core.mail import send_mailfrom django.template.loader import render_to_stringfrom django.utils.html import strip_tagsfrom django.shortcuts import HttpResponsefrom django.core.mail import EmailMessagefrom datetime import time, datefrom Buchungssystem_Lastenkarle.settings import EMAIL_HOST_USER, CANONICAL_HOST, BASE_DIRimport pyqrcodeimport osimport magicfrom django.http import HttpResponsefrom xhtml2pdf import pisaimport urllib.parsefrom db_model.models import User, User_Flagfrom configs.global_variables import lastenkarle_logo_urlfrom configs.global_variables import spenden_linkfrom configs.global_variables import lastenkarle_contact_datadef generate_qrcode(string, booking_string):    qr = pyqrcode.create(string)    project_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))    folder_path = os.path.join(project_dir, 'media', 'qr-codes')    if not os.path.exists(folder_path):        os.makedirs(folder_path)    qr_filename = f"{booking_string}.png"    qr_path = os.path.join(folder_path, qr_filename)    qr.png(qr_path, scale=10)    return qr_pathdef create_and_save_booking_pdf_from_html(html_content, booking_string):    project_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))    output_pdf_dir = os.path.join(project_dir, 'media', 'pdf')    if not os.path.exists(output_pdf_dir):        os.makedirs(output_pdf_dir)    output_pdf_path = os.path.join(output_pdf_dir, f'{booking_string}.pdf')    pdf_file = open(output_pdf_path, "wb")    pisa_status = pisa.CreatePDF(html_content, dest=pdf_file)    pdf_file.close()    if pisa_status.err:        return HttpResponse("Error creating PDF file")    return output_pdf_pathdef split_string_by_delimiter(input_string, delimiter):    if not input_string:        return []  # Return an empty list if the input string is empty    elif not delimiter:        return input_string    split_array = input_string.split(delimiter)  # Split the input string using the delimiter    split_array = [item.strip() for item in split_array]  # Remove leading and trailing whitespaces from each item    return split_arraydef format_equipment(equipment_queryset):    equipment_list = list(equipment_queryset)    equipment_strings = [str(equipment.item) for equipment in equipment_list]    return ', '.join(equipment_strings)def format_opening_hours(store):    if store.mon_opened == False:        mon = '---'    else:        mon = str(store.mon_open.strftime('%H:%M')) + ' - ' + str(store.mon_close.strftime('%H:%M'))    if store.tue_opened == False:        tue = '---'    else:        tue = str(store.tue_open.strftime('%H:%M')) + ' - ' + str(store.tue_close.strftime('%H:%M'))    if store.wed_opened == False:        wed = '---'    else:        wed = str(store.wed_open.strftime('%H:%M')) + ' - ' + str(store.wed_close.strftime('%H:%M'))    if store.thu_opened == False:        thu = '---'    else:        thu = str(store.thu_open.strftime('%H:%M')) + ' - ' + str(store.thu_close.strftime('%H:%M'))    if store.fri_opened == False:        fri = '---'    else:        fri = str(store.fri_open.strftime('%H:%M')) + ' - ' + str(store.fri_close.strftime('%H:%M'))    if store.sat_opened == False:        sat = '---'    else:        sat = str(store.sat_open.strftime('%H:%M')) + ' - ' + str(store.sat_close.strftime('%H:%M'))    if store.sun_opened == False:        sun = '---'    else:        sun = str(store.sun_open.strftime('%H:%M')) + ' - ' + str(store.sun_close.strftime('%H:%M'))    opening_hours = ['Montag : ' + mon, 'Dienstag: ' + tue, 'Mittwoch: ' + wed, 'Donnerstag: ' + thu, 'Freitag: ' + fri, 'Samstag: ' + sat, 'Sonntag: ' + sun]    return(opening_hours)def format_date(date):    return str(date.day) + '.' + str(date.month) + '.' + str(date.year)def send_booking_confirmation(booking):    booking_link = urllib.parse.urljoin(urllib.parse.urljoin(CANONICAL_HOST, "booking/"), booking.string)    generate_qrcode(booking_link, booking.string)    template_path = 'email_templates/BookingresponseQR.html'    context = {        'header_image': lastenkarle_logo_url,        'bike_name': booking.bike.name,        'store_name': booking.bike.store.name,        'start_date': booking.begin,        'end_date': booking.end,        'username': booking.user.username,        'booking_string': booking.string,        'lastenkarle_logo_url': lastenkarle_logo_url,        'qr_path': os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "media", "qr-codes", "%s.png" % booking.string))    }    attachment_html = render_to_string(template_path, context)    attachment_path = create_and_save_booking_pdf_from_html(attachment_html, booking.string)    with open(attachment_path, 'rb') as file:        file_content = file.read()    mime_type = magic.from_buffer(file_content, mime=True)    opening_hours = format_opening_hours(booking.bike.store)    file_name = os.path.basename(attachment_path)    subject = "Deine Buchung von %s bei %s von %s bis %s" % (        booking.bike.name, booking.bike.store.name, booking.begin, booking.end)    html_message = render_to_string("email_templates/BookingMailTemplate.html",                                    {'username': booking.user.username,                                     'bike_name': booking.bike.name,                                     'store_name': booking.bike.store.name,                                     'start_date': format_date(booking.begin),                                     'end_date': format_date(booking.end),                                     'store_opening_hours': opening_hours,                                     'booking_equipment': format_equipment(booking.item.all()),                                     'lastenkarle_logo_url': lastenkarle_logo_url,                                     'store_address': booking.bike.store.address,                                     'store_phone_number': booking.bike.store.phone_number,                                     'store_email': booking.bike.store.email,                                     'spenden_link': spenden_link,                                     'lastenkarle_contact_data': split_string_by_delimiter(lastenkarle_contact_data,                                                                                           ";")})    from_email = EMAIL_HOST_USER    recipient_list = [booking.user.contact_data]    email = EmailMessage(subject, html_message, from_email, recipient_list)    email.content_subtype = 'html'    email.attach(file_name, file_content, mime_type)    email.send()#TODO: deletion of qr code and pdf after returning bike, cancellation, ban, not picking up bikedef send_user_warning_to_admins(booking):    subject = "Benutzer %s wurde ermahnt" % booking.user.username    html_message = render_to_string("email_templates/AdminUserWarningNotification.html",                                    {'username': booking.user.username,                                     'store_name': booking.bike.store.name,                                     'lastenkarle_logo_url': lastenkarle_logo_url,                                     'store_address': booking.bike.store.address,                                     'store_phone_number': booking.bike.store.phone_number,                                     'store_email': booking.bike.store.email,                                     'comment': booking.comment})    from_email = EMAIL_HOST_USER    admin_status = User_Flag.objects.get(flag="Administrator")    users_with_admin_status = User.objects.filter(user_flags=admin_status)    recipient_list = [user.contact_data for user in list(users_with_admin_status)]    email = EmailMessage(subject, html_message, from_email, recipient_list)    email.content_subtype = 'html'    email.send()def send_bike_drop_off_confirmation(booking):    subject = "Statuswechsel deiner Buchung: Lastenrad %s wurde zur√ºckgegeben" % booking.bike.name    html_message = render_to_string("email_templates/BikeDropOffConfirmation.html",                                    {'username': booking.user.username,                                     'bike_name': booking.bike.name,                                     'store_name': booking.bike.store.name,                                     'lastenkarle_logo_url': lastenkarle_logo_url,                                     'store_address': booking.bike.store.address,                                     'store_phone_number': booking.bike.store.phone_number,                                     'store_email': booking.bike.store.email})    from_email = EMAIL_HOST_USER    recipient_list = [booking.user.contact_data]    email = EmailMessage(subject, html_message, from_email, recipient_list)    email.content_subtype = 'html'    email.send()def send_bike_pick_up_confirmation(booking):    subject = "Statuswechsel deiner Buchung: Lastenrad %s wurde abgeholt" % booking.bike.name    html_message = render_to_string("email_templates/BikePickUpConfirmation.html",                                    {'username': booking.user.username,                                     'bike_name': booking.bike.name,                                     'store_name': booking.bike.store.name,                                     'lastenkarle_logo_url': lastenkarle_logo_url,                                     'store_address': booking.bike.store.address,                                     'store_phone_number': booking.bike.store.phone_number,                                     'store_email': booking.bike.store.email})    from_email = EMAIL_HOST_USER    recipient_list = [booking.user.contact_data]    email = EmailMessage(subject, html_message, from_email, recipient_list)    email.content_subtype = 'html'    email.send()def send_cancellation_confirmation(booking):    subject = "Stornierung deiner Buchung von %s bis %s" % (booking.begin, booking.end)    html_message = render_to_string("email_templates/CancellationConfirmation.html",                                    {'username': booking.user.username,                                     'bike_name': booking.bike.name,                                     'store_name': booking.bike.store.name,                                     'start_date': booking.begin,                                     'end_date': booking.end,                                     'lastenkarle_logo_url': lastenkarle_logo_url})    from_email = EMAIL_HOST_USER    recipient_list = [booking.user.contact_data]    email = EmailMessage(subject, html_message, from_email, recipient_list)    email.content_subtype = 'html'    email.send()def send_cancellation_through_store_confirmation(booking):    subject = "Stornierung deiner Buchung von %s bis %s" % (booking.begin, booking.end)    html_message = render_to_string("email_templates/CancellationThroughStoreConfirmation.html",                                    {'username': booking.user.username,                                     'bike_name': booking.bike.name,                                     'store_name': booking.bike.store.name,                                     'start_date': booking.begin,                                     'end_date': booking.end,                                     'lastenkarle_logo_url': lastenkarle_logo_url})    from_email = EMAIL_HOST_USER    recipient_list = [booking.user.contact_data]    email = EmailMessage(subject, html_message, from_email, recipient_list)    email.content_subtype = 'html'    email.send()def send_banned_mail_to_user(user):    subject = "Statuswechsel deines Accounts: Du wurdest gebannt"    html_message = render_to_string("email_templates/UserBannedMail.html",                                    {'username': user.username,                                     'lastenkarle_logo_url': lastenkarle_logo_url,                                     'lastenkarle_contact_data': split_string_by_delimiter(lastenkarle_contact_data,                                                                                           ";")})    from_email = EMAIL_HOST_USER    recipient_list = [user.contact_data]    email = EmailMessage(subject, html_message, from_email, recipient_list)    email.content_subtype = 'html'    email.send()def send_user_registered_confirmation(user):    registration_link = CANONICAL_HOST + "/email-verification/" + str(user.pk) + "/" + user.verification_string    subject = "Dein Account bei Lastenkarle: Bitte best√§tige deine E-Mail"    html_message = render_to_string("email_templates/UserRegisteredConfirmation.html",                                    {'username': user.username,                                     'lastenkarle_logo_url': lastenkarle_logo_url,                                     'registration_link': registration_link})    from_email = EMAIL_HOST_USER    recipient_list = [user.contact_data]    email = EmailMessage(subject, html_message, from_email, recipient_list)    email.content_subtype = 'html'    email.send()def send_user_verified_confirmation(user):    subject = "Statuswechsel deines Accounts: Du bist verifiziert"    html_message = render_to_string("email_templates/UserVerifiedConfirmation.html",                                    {'username': user.username,                                     'lastenkarle_logo_url': lastenkarle_logo_url,                                     'lastenkarle_contact_data': split_string_by_delimiter(lastenkarle_contact_data,                                                                                           ";")})    from_email = EMAIL_HOST_USER    recipient_list = [user.contact_data]    email = EmailMessage(subject, html_message, from_email, recipient_list)    email.content_subtype = 'html'    email.send()def send_user_changed_mail(user):    verification_link = CANONICAL_HOST + "/email-verification/" + str(user.pk) + "/" + user.verification_string    subject = "Dein Account bei Lastenkarle: Bitte best√§tige deine E-Mail"    html_message = render_to_string("email_templates/EmailChangedTemplate.html",                                    {'username': user.username,                                     'verification_link': verification_link,                                     'lastenkarle_logo_url': lastenkarle_logo_url})    from_email = EMAIL_HOST_USER    recipient_list = [user.contact_data]    email = EmailMessage(subject, html_message, from_email, recipient_list)    email.content_subtype = 'html'    email.send()def send_user_warning(booking):    subject = "Statuswechsel deines Accounts: Du wurdest ermahnt"    html_message = render_to_string("email_templates/UserWarning.html",                                    {'username': booking.user.username,                                     'store_name': booking.bike.store.name,                                     'comment': booking.comment,                                     'store_address': booking.bike.store.address,                                     'store_phone_number': booking.bike.store.phone_number,                                     'store_email': booking.bike.store.email,                                     'lastenkarle_logo_url': lastenkarle_logo_url})    from_email = EMAIL_HOST_USER    recipient_list = [booking.user.contact_data]    email = EmailMessage(subject, html_message, from_email, recipient_list)    email.content_subtype = 'html'    email.send()